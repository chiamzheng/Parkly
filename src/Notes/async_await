result = await fetch()
result.toString()

fetch().then(res => res.toString())

function then(handler) {
    handler()
}

async function getUser() {
    const result = await http.get("google.com");
    return result
};

// user = await getUser();
// console.log(user);
// equivalent to




// async is a flag, allowing the "await" function in the function 
async function getUser() {

    // wait for the http request to be responded before continueing to the next line i.e. "console.log("Done user1")"
    const user1 = await httpGet("Bryan")
    console.log("Done user1")

    // same..
    const user2 = await httpGet("Alen")
    console.log("Done user2")
    
    return [user1, user2]
}

async function getUser() {
    const result = await httpGet("user.com")
    return result
}

// await is similar to .then(<give name to the returned result> => <return something>)
// (x) => x + 1 is equivalent to function _(x) { return x + 1 } i.e. => represents return


user = await getUser(); 
console.log(user) // equivalent to getUser().then(user => console.log(user)); 
// prints users 

user = getUser() 
console.log(user); 
// prints Promise<pending>, this is because the code didn't wait (await) for getUser() to return something before running console.log(user)
